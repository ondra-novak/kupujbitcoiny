{"templates": {"email_text": "To: {{email}}\nSubject: Prihlaseni na stranky autocoin.cz\nFrom: info@autocoin.cz\nContent-Type: text/html;charset=utf-8\n\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n</head>\n<body>\n<strong>V\u00e1\u017een\u00fd u\u017eivateli.</strong>\n\n<p>Tento e-mail v\u00e1m byl zasl\u00e1n, proto\u017ee n\u011bkdo, mo\u017en\u00e1 Vy s\u00e1m, po\u017eadoval registraci\nnebo p\u0159ihl\u00e1\u0161en\u00ed na str\u00e1nce <strong>www.autocoin.cz</strong></p>\n\n<p>Pokud si p\u0159ejete pokra\u010dovat v registraci nebo v p\u0159ihl\u00e1\u0161en\u00ed, klikn\u011bte na n\u00ed\u017ee uveden\u00fd odkaz</p>\n\n<a href=\"http://www.autocoin.cz/#page=login&email={{email_url}}&profile={{profile}}\">http://www.autocoin.cz/#page=login&email={{email}}&profile={{profile}}</a>\n\n\n<p>V p\u0159\u00edpad\u011b, \u017ee si nejste v\u011bdom \u017e\u00e1dn\u00e9 takov\u00e9 \u010dinnost, pak se omlouv\u00e1me,\nzrejm\u011b n\u011bkdo jin\u00fd omylem na str\u00e1nk\u00e1ch zadal v\u00e1\u0161 e-mail. E-mail pros\u00edm sma\u017ete.</p>\n\n</html>\n</body>"}, "couchapp": {"signatures": {"index.html": "bb8d052ec8280b08c409d0f9f0ca674e", "code.js": "786d8f375c5ac5771c4d8d2343abe738", "mystyle.css": "784ff67067f171ea963b76d64c733b50", "pouchdb.authentication.min.js": "e53cd60274f4847346417a84d815705c", "test.html": "d41d8cd98f00b204e9800998ecf8427e", "pouchdb-6.2.0.min.js": "4c6c2f504467848c874fc8a1f578dee8"}, "objects": {"89701067d04f58997845b39d95a0933c": "function (doc, req) {\n \n\t\t\n\t//!json templates.email_text\n\t\n\tvar getProfileID = require('views/lib/profileid').getProfileID;\n\tvar Mustache = require('views/lib/mustache');\n\n\t\n\n\tvar view = {\n\t\t\t  email_url: encodeURIComponent(doc.email),\n\t\t\t  email:  doc.email,\n\t\t\t  profile: getProfileID(doc.email),\t\t\t \n\t\t\t};\n\n//\tvar output=\"xxx\";\n\tvar output = Mustache.render(templates.email_text, view);\n\t\n\treturn {\"headers\":{\"Content-Type\":\"text/plain;charset=utf-8\"},\"body\":output};\n\t\n\t\n}"}, "manifest": ["updates/", "updates/sendmail.js", "updates/profile.js", "views/", "views/lib/", "views/lib/salt.js", "views/lib/base64.js", "views/lib/mustache.js", "views/lib/validateFields.js", "views/lib/profileid.js", "views/lib/sha256.js", "shows/", "shows/email_login.js", "templates/", "templates/email_text.html", "filters/", "filters/emails.js"]}, "updates": {"profile": "function(doc, httpreq){\n\t\n\t\n\tvar getProfileID = require('views/lib/profileid').getProfileID;\n\tvar Validator = require('views/lib/validateFields').FieldValidator;\n\tvar req = JSON.parse(httpreq.body);\n\tvar errors = null;\n\tvar nochange = false;\n\n\tpage = req.page;\t\n\t\t\n\tif (doc == null) {\n\t\t\n\t\tif (page == \"register\") {\n\t\t\t\n\t\t\temail = req.email;\n\t\t\tdocid = getProfileID(email);\n\t\t\tif (docid != httpreq.id) {\n\t\t\t\treturn [null, {code:403,json:{\"error\":\"UserID doesn't match\"}}];\n\t\t\t}\n\t\t\tdoc = {\n\t\t\t\t\t_id: httpreq.id,\n\t\t\t\t\tclass:\"profile\",\n\t\t\t\t\temail: email,\n\t\t\t\t\tstat_id: httpreq.uuid,\n\t\t\t\t\tchkcode: Math.round(Math.random()*1000000)\n\t\t\t};\n\t\t\t\n\t\t} else {\n\t\t\treturn [null, {code:403,body:\"Need register\"}];\n\t\t}\t\t\n\t} else {\n\t\t\n\t\tif (page == \"identity\") {\n\t\t\t\n\t\t\tvar v = new Validator;\n\t\t\t\n\t\t\tdoc[page] = {};\n\t\t\tvar pdata = doc[page];\n\t\t\t\n\t\t\tpdata.jmeno=v.string(req,\"jmeno\");\n\t\t\tpdata.prijmeni=v.string(req,\"prijmeni\");\n\t\t\tpdata.rc=v.rcnumber(req,\"rc\");\n\t\t\tpdata.op=v.string(req,\"op\");\n\t\t\tpdata.adresa=v.string(req,\"adresa\");\n\t\t\tpdata.obec=v.string(req,\"obec\");\n\t\t\tpdata.psc = v.pscnumber(req,\"psc\");\n\t\t\tpdata.telefon = v.phonenumber(req,\"telefon\");\n\t\t\tpdata.politik = v.mandatory(req,\"politik\");\n\t\t\tif (v.hasErrors()) errors = v.errors;\n\t\t}  else {\n\t\t\tnochange = true;\n\t\t}\n\t\t\n\t}\n\t\n\tvar missing =[];\n\tif (!(\"identity\" in doc)) missing.push(\"identity\");\n\tvar attachments;\n\tif (\"_attachments\" in doc) attachments = doc._attachments; else attachments={};\n\tif (!(\"op_front\" in attachments)) missing.push(\"op_front\");\n\tif (!(\"op_back\" in attachments)) missing.push(\"op_back\");\n\tif (!(\"doklad2\" in attachments)) missing.push(\"op_back\");\n\tif (!(\"selfie\" in attachments)) missing.push(\"selfie\");\n\tif (!(\"crypto\" in doc)) missing.push(\"crypto\");\n\t\n\tout = {\n\t\t\tmissing:missing,\n\t\t\terrors:errors,\n\t\t\tpage:page\t\n\t};\n\t\n\tif (errors != null) nochange = true;\n\t\n\tif (nochange) {\n\t\treturn [null, {json:out, code:200}];\n\t} else {\t\n\t\treturn [doc, {json:out, code:202}];\n\t}\t\n}", "sendmail": "function(doc, req) {\n\t\n\t\n\n\tvar data = JSON.parse(req.body);\n\t\n\tif (!data.email) {\n\t\treturn [null, {code:400,body:\"email is mandatory\"}];\n\t}\n\tif (!data.template) {\n\t\treturn [null, {code:400,body:\"template is mandatory\"}];\n\t}\n\t\n\tdata._id = req.uuid;\n\tdata.class = \"email\";\n\t\n\treturn [data, \"\"];\n}"}, "filters": {"emails": "function(doc) {\n\treturn doc.class == \"email\";\t\n}"}, "views": {"lib": {"base64": "// Converts an ArrayBuffer directly to base64, without any intermediate 'convert to string then\n// use window.btoa' step. According to my tests, this appears to be a faster approach:\n// http://jsperf.com/encoding-xhr-image-data/5\n\n/*\nMIT LICENSE\n\nCopyright 2011 Jon Leighton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nfunction base64ArrayBuffer(arrayBuffer, base64url) {\n  var base64    = ''\n  var encodings = base64url?\n\t\t  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n\t\t :'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n  var bytes         = new Uint8Array(arrayBuffer)\n  var byteLength    = bytes.byteLength\n  var byteRemainder = byteLength % 3\n  var mainLength    = byteLength - byteRemainder\n\n  var a, b, c, d\n  var chunk\n\n  // Main loop deals with bytes in chunks of 3\n  for (var i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12\n    c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6\n    d = chunk & 63               // 63       = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength]\n\n    a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3)   << 4 // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + '=='\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\n\n    a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15)    <<  2 // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + '='\n  }\n  \n  return base64\n}\n\nexports.base64 = base64ArrayBuffer;", "profileid": "function getProfileID(email) {\n\t\n\tvar sha256 = require('views/lib/sha256').sha256;\n\tvar base64 = require('views/lib/base64').base64;\n\tvar salt = require('views/lib/salt').key;\n\n\tvar hash = sha256.hmac.create(salt);\n\thash.update(email);\n\treturn \"P\"+base64(hash.array(),true).substr(0,43);\n\t\n}\n\nexports.getProfileID = getProfileID;", "sha256": "/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.7.1\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = require('crypto');\n    var Buffer = require('buffer').Buffer;\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString = typeof message !== 'string';\n    if (notString) {\n      if (message === null || message === undefined) {\n        throw ERROR;\n      } else if (message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n      }\n    }\n    var length = message.length;\n    if (notString) {\n      if (typeof length !== 'number' ||\n        !Array.isArray(message) && \n        !(ARRAY_BUFFER && ArrayBuffer.isView(message))) {\n        throw ERROR;\n      }\n    }\n    var code, index = 0, i, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var notString = typeof key !== 'string';\n    if (notString) {\n      if (key === null || key === undefined) {\n        throw ERROR;\n      } else if (key.constructor === root.ArrayBuffer) {\n        key = new Uint8Array(key);\n      }\n    }\n    var length = key.length;\n    if (notString) {\n      if (typeof length !== 'number' ||\n        !Array.isArray(key) && \n        !(ARRAY_BUFFER && ArrayBuffer.isView(key))) {\n        throw ERROR;\n      }\n    } else {\n      var bytes = [], length = key.length, index = 0, code;\n      for (var i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >> 12));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >> 18));\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (var i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();", "salt": "exports.key=\"hjiowqmpoqwwreqpoekwqpowjrpwoeqqeqopiPQO\";", "mustache": "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template + ':' + (tags || mustache.tags).join(':')] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.0';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));", "validateFields": "FieldValidator = function() {\n\t\n\tthis.errors = [];\n\t\n};\n\nFieldValidator.prototype.string = function(struct, field) {\n\tthis.mandatory(struct,field);\n\treturn struct[field];\n};\n\nFieldValidator.prototype.number = function(struct, field) {\n\tthis.mandatory(struct,field);\n\treturn struct[field];\n};\n\nFieldValidator.prototype.rcnumber = function(struct, field) {\n\tthis.mandatory(struct,field);\n\treturn struct[field];\n};\nFieldValidator.prototype.opnumber = function(struct, field) {\n\tthis.mandatory(struct,field);\n\treturn struct[field];\n};\nFieldValidator.prototype.pscnumber = function(struct, field) {\n\tthis.mandatory(struct,field);\n\treturn struct[field];\n};\nFieldValidator.prototype.phonenumber = function(struct, field) {\n\tthis.mandatory(struct,field);\n\treturn struct[field];\n};\nFieldValidator.prototype.hasErrors = function() {\n\treturn this.errors.length != 0;\n};\nFieldValidator.prototype.addError = function(code, field, desc) {\n\tthis.errors.push({code:code,field:field,message:desc});\n};\nFieldValidator.prototype.mandatory = function(struct,field) {\n\tif (!struct[field]) {\n\t\tthis.addError(50, field, \"Povinn\u00e1 polo\u017eka\");\n\t}\n\treturn struct[field];\n\t\n};\n\nexports.FieldValidator = FieldValidator;"}}, "_attachments": {"index.html": {"data": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KPHRpdGxlPkNvdWNoYmxvZzwvdGl0bGU+CjxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgo8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJteXN0eWxlLmNzcyI+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzdGFydCgpOyI+CjxzY3JpcHQgc3JjPSJwb3VjaGRiLTYuMi4wLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KPHNjcmlwdCBzcmM9InBvdWNoZGIuYXV0aGVudGljYXRpb24ubWluLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iY29kZS5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KCjxkaXYgY2xhc3M9ImhlYWRlciI+PC9kaXY+Cgo8ZGl2IGNsYXNzPSJib2R5cGFydCI+CjxkaXYgY2xhc3M9ImNvbnRlbnQiPgo8ZGl2IGNsYXNzPSJhcnRpY2xlIiBpZD0iYXJ0VmlldyIgaGlkZGVuPSIxIj4KPGRpdiBjbGFzcz0icGFuZWwiPjxidXR0b24gaWQ9ImJ1dHRHb0VkaXQiPlVwcmF2aXQ8L2J1dHRvbj48YnV0dG9uIGlkPSJidXR0R29OZXciPk5vdsO9PC9idXR0b24+PC9kaXY+CjxkaXYgY2xhc3M9InRpdGxlIj4KPEgyIGlkPSJhcnRUaXRsZSI+JCh0aXRsZSk8L0gyPgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXJ0UHVibGlzaEluZm8iPgo8ZGl2IGlkPSJhcnRBdXRob3IiPiQoYXV0aG9yKTwvZGl2Pgo8ZGl2IGlkPSJhcnREYXRldGltZUNyZWF0ZWQiPiQoZGF0ZXRpbWUpPC9kaXY+CjxkaXYgaWQ9ImFydERhdGV0aW1lVXBkYXRlZCI+JChkYXRldGltZSk8L2Rpdj4KPC9kaXY+CjxkaXYgaWQ9ImFydFRleHQiPiQodGV4dCk8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJhcnRpY2xlZWRpdCIgaWQ9ImFydEVkaXQiPgo8ZGl2IGNsYXNzPSJ0aXRsZSI+Ck5hZHBpczogPGlucHV0IGlkPSJhcnRUaXRsZUVkaXQiIHR5cGU9InRleHQiIHZhbHVlPSIkKHRpdGxlKSI+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJodG1sZWRpdG9yIiBpZD0iYXJ0VGV4dEVkaXQiPjwvZGl2Pgo8ZGl2IGNsYXNzPSJhdHRhY2htZW50cyIgaWQ9ImF0dGFjaG1lbnRzIj4KPGRpdiBpZD0iYXR0Y2hIZWFkIj5QxZnDrWxvaHk8L2Rpdj4KPGRpdiBpZD0iYXR0Y2hQYW5lbCI+Cgk8YnV0dG9uIGNsYXNzPSJzZWxBbGwiPltYXTwvYnV0dG9uPgoJPGJ1dHRvbiBjbGFzcz0iZGVsZXRlIj5TbWF6YXQ8L2J1dHRvbj4KCTxidXR0b24gY2xhc3M9InRodW1iIj5WeXR2b8WZaXQgbsOhaGxlZDwvYnV0dG9uPgoJPGJ1dHRvbiBjbGFzcz0idW50aHVtYiI+U21hemF0IG7DoWhsZWQ8L2J1dHRvbj4KCTxidXR0b24gY2xhc3M9ImFkZEdhbCI+UMWZaWRhdCBkbyBnYWxlcmllPC9idXR0b24+Cgk8YnV0dG9uIGNsYXNzPSJkZWxHYWwiPlZ5am1vdXQgeiBnYWxlcmllPC9idXR0b24+CjwvZGl2Pgo8dGFibGU+Cjx0Ym9keSBpZD0iYXR0Y2hMaXN0Ij4KPC90Ym9keT4KPC90YWJsZT4KPC9kaXY+CjwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0ibmF2aWdhdGlvbiI+CiQobmF2aWdhdGlvbikKPC9kaXY+Cgo8L2Rpdj4KPGRpdiBjbGFzcz0ibG9naW5EbGciIGhpZGRlbj0iMSI+CjxkaXYgY2xhc3M9ImxpZ2h0Ym94Ij48L2Rpdj4KPGRpdiBjbGFzcz0iaW5uZXIiPgo8bGFiZWw+VcW+aXZhdGVsc2vDqSBqbcOpbm86IDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0ibG9naW5Vc2VyIj48L2xhYmVsPgo8bGFiZWw+SGVzbG86IDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgY2xhc3M9ImxvZ2luUGFzc3dvcmQiPjwvbGFiZWw+CjxidXR0b24gY2xhc3M9ImxvZ2luQWN0aW9uIj5QxZlpaGzDoXNpdCBzZTwvYnV0dG9uPgo8YnV0dG9uIGNsYXNzPSJsb2dpbkNhbmNlbCI+U3Rvcm5vPC9idXR0b24+CjwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYXR0YWNoRGxnIiBoaWRkZW49IjEiPgo8bGFiZWw+VnliZXJ0ZSBqZWRlbiBpIHbDrWNlIHNvdWJvcsWvOiA8aW5wdXQgdHlwZT0iZmlsZSIgY2xhc3M9ImF0dGFjaEZpbGVzIiBtdWx0aXBsZT48L2xhYmVsPgo8YnV0dG9uIGNsYXNzPSJhdHRhY2hDYW5jZWwiPlN0b3JubzwvYnV0dG9uPgo8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+", "content_type": "text/html"}, "code.js": {"data": "", "content_type": "application/javascript"}, "mystyle.css": {"data": "Ym9keSB7CgkgICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9CgpkaXYuY29udGVudCB7CgltYXJnaW4tcmlnaHQ6MjYlOwoJYmFja2dyb3VuZC1jb2xvcjogI0RERERDQzsKfQoKZGl2Lm5hdmlnYXRpb24gewoJcG9zaXRpb246YWJzb2x1dGU7CglyaWdodDowOwoJdG9wOjA7Cgl3aWR0aDogMjUlOwp9CgpkaXYuYm9keXBhcnQgewoJcG9zaXRpb246cmVsYXRpdmU7CgliYWNrZ3JvdW5kLWNvbG9yOiAjQUFBQUREOwp9CgpkaXYuaGVhZGVyIHsKCWhlaWdodDogMTBlbTsJCn0KCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHsKCWRpdi5jb250ZW50IHsKCQltYXJnaW4tcmlnaHQ6MHB4OwoJfQoJZGl2Lm5hdmlnYXRpb24gewoJCXBvc2l0aW9uOnJlbGF0aXZlOwoJCXdpZHRoOiBhdXRvOwoJfQoJCn0KCmRpdi5hcnRpY2xlZWRpdCB7CgkKCXBhZGRpbmc6IDEwcHg7Cn0KCmRpdi5odG1sZWRpdG9yIGRpdi5jb250ZW50IHsKCW1pbi1oZWlnaHQ6IDEwZW07Cglib3JkZXI6IDFweCBzb2xpZDsKCXdpZHRoOiAxMDAlOwoJcGFkZGluZzogNXB4OwoJYmFja2dyb3VuZC1jb2xvcjogI0VFRTsJCglib3gtc2l6aW5nOiBib3JkZXItYm94Owp9CgpkaXYubG9naW5EbGcgewoJcG9zaXRpb246Zml4ZWQ7CglsZWZ0OjA7Cgl0b3A6MDsKCXdpZHRoOiAxMDB2dzsKCWhlaWdodDogMTAwdmg7Cn0KCmRpdi5saWdodGJveCB7CglsZWZ0OjA7Cgl0b3A6MDsKCXdpZHRoOiAxMDB2dzsKCWhlaWdodDogMTAwdmg7CgliYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsKCW9wYWNpdHk6IDAuMzsKfQoKZGl2LmlubmVyIHsKCXBvc2l0aW9uOmFic29sdXRlOwoJdG9wOiAyMCU7CglsZWZ0OiA1MCU7Cgl3aWR0aDogMzAwcHg7CgliYWNrZ3JvdW5kLWNvbG9yOiAjRUVEOwoJbWFyZ2luLWxlZnQ6IC0xNTBweDsKCXBhZGRpbmc6IDVweDsKCQp9", "content_type": "text/css"}, "pouchdb.authentication.min.js": {"data": "", "content_type": "application/javascript"}, "test.html": {"data": "", "content_type": "text/html"}, "pouchdb-6.2.0.min.js": {"data": "", "content_type": "application/javascript"}}, "_id": "_design/src", "shows": {"email_login": "function (doc, req) {\n \n\t\t\n\tvar templates = {\"email_text\": \"To: {{email}}\\nSubject: Prihlaseni na stranky autocoin.cz\\nFrom: info@autocoin.cz\\nContent-Type: text/html;charset=utf-8\\n\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n</head>\\n<body>\\n<strong>V\\u00e1\\u017een\\u00fd u\\u017eivateli.</strong>\\n\\n<p>Tento e-mail v\\u00e1m byl zasl\\u00e1n, proto\\u017ee n\\u011bkdo, mo\\u017en\\u00e1 Vy s\\u00e1m, po\\u017eadoval registraci\\nnebo p\\u0159ihl\\u00e1\\u0161en\\u00ed na str\\u00e1nce <strong>www.autocoin.cz</strong></p>\\n\\n<p>Pokud si p\\u0159ejete pokra\\u010dovat v registraci nebo v p\\u0159ihl\\u00e1\\u0161en\\u00ed, klikn\\u011bte na n\\u00ed\\u017ee uveden\\u00fd odkaz</p>\\n\\n<a href=\\\"http://www.autocoin.cz/#page=login&email={{email_url}}&profile={{profile}}\\\">http://www.autocoin.cz/#page=login&email={{email}}&profile={{profile}}</a>\\n\\n\\n<p>V p\\u0159\\u00edpad\\u011b, \\u017ee si nejste v\\u011bdom \\u017e\\u00e1dn\\u00e9 takov\\u00e9 \\u010dinnost, pak se omlouv\\u00e1me,\\nzrejm\\u011b n\\u011bkdo jin\\u00fd omylem na str\\u00e1nk\\u00e1ch zadal v\\u00e1\\u0161 e-mail. E-mail pros\\u00edm sma\\u017ete.</p>\\n\\n</html>\\n</body>\"};\n\t\n\tvar getProfileID = require('views/lib/profileid').getProfileID;\n\tvar Mustache = require('views/lib/mustache');\n\n\t\n\n\tvar view = {\n\t\t\t  email_url: encodeURIComponent(doc.email),\n\t\t\t  email:  doc.email,\n\t\t\t  profile: getProfileID(doc.email),\t\t\t \n\t\t\t};\n\n//\tvar output=\"xxx\";\n\tvar output = Mustache.render(templates.email_text, view);\n\t\n\treturn {\"headers\":{\"Content-Type\":\"text/plain;charset=utf-8\"},\"body\":output};\n\t\n\t\n}"}}